/*
 * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.
 *  
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *  
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 * 
 */

//@import "styles/bootstrap-mixins.less";

/**
 *  Mixins for spritesheet images -- Copied from brackets_mixins.less 
 */

/* Sets the background to the given offset in the spritesheet. Typically, the element you set this on requires
   a fixed size so that other parts of the spritesheet don't show. */
.sprite(@x-offset, @y-offset, @sprite-sheet) {
    background: url("@{sprite-sheet}") -@x-offset -@y-offset no-repeat;
}

/* Turns the given element into an icon showing the given rectangle in the spritesheet. Can be used on empty elements
   (e.g. a link with no text) or on the :before/:after selector of elements that have content. */
.sprite-icon(@x-offset, @y-offset, @width, @height, @sprite-sheet) {
    content: "";
    .sprite(@x-offset, @y-offset, @sprite-sheet);
    display: inline-block;
    width: @width;
    height: @height;
}

/* Changes an element that's already showing one area of a spritesheet to show a different area of the same size.
   Should be used with an element whose base styling includes .sprite() or .sprite-icon() */
.sprite-swap(@x-offset, @y-offset) {
    background-position: -@x-offset -@y-offset;
}

.edge-web-fonts {

    div {
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
	    -moz-box-sizing: border-box;    /* Firefox, other Gecko */
	    box-sizing: border-box;          
    }
    .ewf-picker {
        position: static;
        width: 560px;
        background-color: white;
        
        .ewf-side-bar {
            float: left;
            clear: both;
        }
        
        .ewf-search-fonts {
            width: 560px;
            float: left;
            clear: both;
            margin-top: 10px;
            margin-bottom: 12px;
            padding-top: 0px;
            padding-bottom: 0px;
            padding-right: 0px;
            padding-left: 50px;
            height: 32px;
            text-shadow: 0 1px 0 rgba(255, 255, 255, 0.48);
            -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
            -moz-box-sizing: border-box;    /* Firefox, other Gecko */
            box-sizing: border-box;
        }
        
        button {
            padding: 0;
        }
        
        button:hover {
            background: rgb(220,225,228);
            background-position: 0 -30px;
        }
        
        button.selected {
            background: rgb(189,189,189);
        }
        
        .ewf-button {
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.48) inset;
            border: 1px solid rgb(166, 168, 168);
            background: rgb(219,221,222);
            border-radius: 3px;
            width: 33px;
            height: 33px;
        }
        
        .ewf-button:disabled {
            background-position: -30px 0;
        }
        
        ul {
            padding: 0;
            margin: 0;
            margin-bottom: 18px;
        }
        
        li {
            list-style: none;
            height: 30px;
        }
        
        li button {
            border: 1px solid #b4b6b5;
            background: rgb(219,221,222);
            width: 33px;
            height: 33px;
        }
        
        li:first-child button {
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.48) inset;
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
        }
        
        li:last-child button {
            border-bottom-left-radius: 3px;
            border-bottom-right-radius: 3px;
        }
        
        .ewf-icon {
            padding: 0;
            margin: 0 auto;
            width: 120px;
            height: 60px;
        }
        
        .ewf-icon:disabled {
            background-position: -30px 0;
        }
        
        .divider {
            width: 1px;
            height: 340px;
            float: left;
        }
        
        .divider-left {
            margin: 0px 0px 0px 9px;
            background-image: -webkit-linear-gradient(top, rgba(169, 169, 169, 0) 0%, rgba(169, 169, 169, 1) 50%, rgba(169, 169, 169, 0) 100%, rgba(169, 169, 169, 1) 50%, rgba(169, 169, 169, 0) 0%);
        }
        
        .divider-right {
            margin: 0px 9px 0px 0px;
            background-image: -webkit-linear-gradient(top, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 50%, rgba(255, 255, 255, 0) 100%, rgba(255, 255, 255, 1) 50%, rgba(255, 255, 255, 0) 0%);
        }
        
        .ewf-results {
            float: left;
            width: 507px;
            height: 340px;
            overflow-y: scroll;
            overflow-x: hidden;
        }
        
        .ewf-font {
            position: relative;
            float: left;
            width: 102px;
            height: 120px;
            margin-left: 15px;
            margin-bottom: 15px;
            background-repeat: no-repeat;
            border: 1px solid #b4b6b5;
            border-radius: 3px;
            background-color: white;
            background-position: center 5px;
            cursor: pointer;
            &.selected {
                //box-shadow: 0 0 15px rgba(0,0,0,0.48);   
                border: 1px solid #F18900;
            }
        }
        
        .ewf-font-details {
            position: absolute;
            bottom: 0;
            height: 40px;
            width: 100px;
            padding: 6px;
            background-color: rgb(229,232,231);
            border-top: 1px solid #b4b6b5;
            border-bottom-right-radius: 3px;
            border-bottom-left-radius: 3px;
        }
        
        .ewf-font-details label {
            position: relative;
            font-size: 12px;
            text-shadow: 0 1px 0 #fff;
            width: auto;
            text-align: left;
            line-height: normal;
            padding-top: 0px;
        }
        
        .wait {
            top: 250px;
            left: 300px;
        }
            
    } // END .ewf-picker
} // END .edge-web-fonts

/** 
 *  Brackets-specific Dialog Styling
 */

//@dialog-width: 812px;

.edge-web-fonts-browse-dialog {
    margin-top: -340px;
    .modal-footer {
        clear: both;   
    }
}

.edge-web-fonts-include-dialog {
    textarea {
        width: 550px;   
    }
}

.edge-web-fonts-howto-dialog {
    ol {
        font-size: 1.1em;
    }

    li {
        margin-bottom: .4em;
        list-style-position: outside;
    }

    .ewf-diagram { 
        width:100%;
        text-align: center;
    }

    .dialog-message { 
        margin-bottom:0px;
    }
}

/**
 *  Brackets Toolbar Icon Styling
 */

#toolbar-ewf {
    position: relative;
    top: 2px;
    padding-right: 8px;
    
    .sprite-icon(0,0, 16px,16px, "img/ewf-toolbar-sprites.svg");
    &:hover {
        .sprite-swap(0,16px);
    }
    // 'Active' state
    &.active {
        .sprite-swap(0,32px);
    }
    &.active:hover {
        .sprite-swap(0,48px);
    }
}

/**
 *  Brackets Code Hint Styling
 */

.dropdown.codehint-menu {
    
    .ewf-codehint-addition {
        // NOTE: This is **required** because PopUpManager checks whether a popup is
        // closed by checking if it has any visible children. PopUps don't always get
        // removed from the DOM right when they're closed. If we don't have this rule
        // we get infinite recursion in PopUpManager.
        display: none;
    }
    
    &.open {
        .ewf-codehint-addition {
            display: block;
            border: 1px solid #C8C8C8;
            border-bottom-left-radius: 3px;
            border-bottom-right-radius: 3px;
            background-color: white;
            p {
                padding: 5px 10px;
                margin: 0px;
            }
        }

        .dropdown-menu.has-addition {
            border-bottom-left-radius: 0px;
            border-bottom-right-radius: 0px;        
        }        
    }
}
